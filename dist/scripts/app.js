/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/scripts/app.js":
/***/ (function(module, exports) {

eval("/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\n(function () {\n\tvar container, button, menu, links, i, len, focusableElements, firstFocusableElement, lastFocusableElement;\n\n\tcontainer = document.getElementById('js-menu--primary');\n\n\t// Bail if there is no menu.\n\tif (!container) {\n\t\treturn;\n\t}\n\n\tbutton = container.getElementsByTagName('button')[0];\n\tif ('undefined' === typeof button) {\n\t\treturn;\n\t}\n\n\tmenu = container.getElementsByTagName('ul')[0];\n\n\t// Hide menu toggle button if menu is empty and return early.\n\tif ('undefined' === typeof menu) {\n\t\tbutton.style.display = 'none';\n\t\treturn;\n\t}\n\n\tmenu.setAttribute('aria-expanded', 'false');\n\tif (!menu.classList.contains('js-nav-menu')) {\n\t\tmenu.classList.add('js-nav-menu');\n\t}\n\n\tbutton.addEventListener('click', function () {\n\t\ttoggleMenu();\n\n\t\tsetFocus();\n\t});\n\n\t// Close menu using Esc key.\n\tdocument.addEventListener('keyup', function (event) {\n\t\tif (27 === event.keyCode) {\n\t\t\tif (isMenuOpen()) {\n\t\t\t\ttoggleMenu(); // Close menu.\n\t\t\t\tbutton.focus();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Remove ARIA when on \"desktop\".\n\twindow.addEventListener('resize', removeAria);\n\n\t// Get all the link elements within the menu.\n\tlinks = menu.getElementsByTagName('a');\n\n\t// Each time a menu link is focused or blurred, toggle focus.\n\tfor (i = 0, len = links.length; i < len; i++) {\n\t\tlinks[i].addEventListener('focus', toggleFocus, true);\n\t\tlinks[i].addEventListener('blur', toggleFocus, true);\n\t}\n\n\t/**\n  * Toggle menu classes and ARIA.\n  */\n\tfunction toggleMenu() {\n\t\tcontainer.classList.toggle('is-toggled');\n\n\t\tvar expanded = 'false' === button.getAttribute('aria-expanded') ? 'true' : 'false';\n\t\tbutton.setAttribute('aria-expanded', expanded);\n\t\tmenu.setAttribute('aria-expanded', expanded);\n\t}\n\n\t/**\n  * Set focus when nav is open.\n  */\n\tfunction setFocus() {\n\n\t\t// Bail if menu is not open.\n\t\tif (!isMenuOpen()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set focusable elements inside main navigation.\n\t\tfocusableElements = container.querySelectorAll(['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])']);\n\t\tfirstFocusableElement = focusableElements[0];\n\t\tlastFocusableElement = focusableElements[focusableElements.length - 1];\n\n\t\t// Redirect last Tab to first focusable element.\n\t\tlastFocusableElement.addEventListener('keydown', function (e) {\n\t\t\tif (9 === e.keyCode && !e.shiftKey) {\n\t\t\t\te.preventDefault();\n\t\t\t\tbutton.focus(); // Set focus on first element - that's actually close menu button.\n\t\t\t}\n\t\t});\n\n\t\t// Redirect first Shift+Tab to toggle button element.\n\t\tfirstFocusableElement.addEventListener('keydown', function (e) {\n\t\t\tif (9 === e.keyCode && e.shiftKey) {\n\t\t\t\te.preventDefault();\n\t\t\t\tbutton.focus(); // Set focus on first element.\n\t\t\t}\n\t\t});\n\n\t\t// Redirect Shift+Tab from the toggle button to last focusable element.\n\t\tbutton.addEventListener('keydown', function (e) {\n\t\t\tif (9 === e.keyCode && e.shiftKey) {\n\t\t\t\te.preventDefault();\n\t\t\t\tlastFocusableElement.focus(); // Set focus on last element.\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n  * Is menu open.\n  *\n  * @returns {boolean} True or false.\n  */\n\tfunction isMenuOpen() {\n\t\tvar isMenuOpen = 'false' === button.getAttribute('aria-expanded') ? false : true;\n\t\treturn isMenuOpen;\n\t}\n\n\t/**\n  * Remove ARIA on \"desktop\".\n  */\n\tfunction removeAria() {\n\n\t\t// If menu toggle button have display: none css rule, we're on desktop.\n\t\tif ('none' === window.getComputedStyle(button, null).getPropertyValue('display')) {\n\t\t\tbutton.setAttribute('aria-expanded', 'false');\n\t\t\tmenu.setAttribute('aria-expanded', 'false');\n\t\t}\n\t}\n\n\t/**\n  * Sets or removes .focus class on an element.\n  */\n\tfunction toggleFocus() {\n\t\tvar self = this;\n\n\t\t// Move up through the ancestors of the current link until we hit .js-nav-menu.\n\t\twhile (-1 === self.className.indexOf('js-nav-menu')) {\n\n\t\t\t// On li elements toggle the class .focus.\n\t\t\tif ('li' === self.tagName.toLowerCase()) {\n\t\t\t\tif (-1 !== self.className.indexOf('focus')) {\n\t\t\t\t\tself.className = self.className.replace(' focus', '');\n\t\t\t\t} else {\n\t\t\t\t\tself.className += ' focus';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tself = self.parentElement;\n\t\t}\n\t}\n\n\t/**\n  * Toggles `focus` class to allow submenu access on tablets.\n  */\n\t(function (container) {\n\t\tvar touchStartFn,\n\t\t    i,\n\t\t    parentLink = container.querySelectorAll('.menu-item-has-children > a, .page_item_has_children > a');\n\n\t\tif ('ontouchstart' in window) {\n\t\t\ttouchStartFn = function touchStartFn(e) {\n\t\t\t\tvar menuItem = this.parentNode,\n\t\t\t\t    i;\n\n\t\t\t\tif (!menuItem.classList.contains('focus')) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tfor (i = 0; i < menuItem.parentNode.children.length; ++i) {\n\t\t\t\t\t\tif (menuItem === menuItem.parentNode.children[i]) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmenuItem.parentNode.children[i].classList.remove('focus');\n\t\t\t\t\t}\n\t\t\t\t\tmenuItem.classList.add('focus');\n\t\t\t\t} else {\n\t\t\t\t\tmenuItem.classList.remove('focus');\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (i = 0; i < parentLink.length; ++i) {\n\t\t\t\tparentLink[i].addEventListener('touchstart', touchStartFn, false);\n\t\t\t}\n\t\t}\n\t})(container);\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/scripts/app.js\n");

/***/ }),

/***/ "./resources/styles/editor.scss":
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3R5bGVzL2VkaXRvci5zY3NzPzhjZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3R5bGVzL2VkaXRvci5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9zdHlsZXMvZWRpdG9yLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IC4vcmVzb3VyY2VzL3N0eWxlcy9lZGl0b3Iuc2Nzc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/styles/editor.scss\n");

/***/ }),

/***/ "./resources/styles/style.scss":
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3R5bGVzL3N0eWxlLnNjc3M/N2JjYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3Jlc291cmNlcy9zdHlsZXMvc3R5bGUuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvc3R5bGVzL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IC4vcmVzb3VyY2VzL3N0eWxlcy9zdHlsZS5zY3NzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/styles/style.scss\n");

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./resources/scripts/app.js");
__webpack_require__("./resources/styles/style.scss");
module.exports = __webpack_require__("./resources/styles/editor.scss");


/***/ })

/******/ });